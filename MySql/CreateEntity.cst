<%-- 
Name:
Author: 
Description: 
--%>
<%@ Template Language="C#" TargetLanguage="Text" %>
<%-- 注册要生成的模板 --%>
<%@ Register Name="TablesTemplate" Template="Tables/TableEnum.cst" MergeProperties="False" ExcludeProperties="" %>
<%@ Register Name="TableClumnsTemplate" Template="Tables/TableProperties.cst" MergeProperties="False" ExcludeProperties="" %>
<%--声明数据库的参数，在左下角的Database属性中，选择要操作的数据库名称--%>
<%@ Property Category="Database" Name="SourceDatabase" Type="SchemaExplorer.DatabaseSchema" Optional="False" Description="Database the table enums will come from." %>
<%--声明数据库表的参数，在左下角的表属性中，选择要操作的数据库表--%>
<%@ Property Name="SourceTable" Type="SchemaExplorer.TableSchema" Category="Context" Optional="True" Description="Table that the object is based on." %>
 
<%-- 执行输出文件的函数 --%>
<% this.BuildEntities(); %> 

<script runat="template">
// 生成实体文件
public void BuildEntities()
{
    //生成列举表名的模板
    CodeTemplate table=new TablesTemplate();
    //指定输出路径
    string tableFilePath=OutputDirectory+"\\"+this.SourceTable.Name+".cs";
    //给子模板参数赋值
        table.SetProperty("SourceDatabase",this.SourceDatabase);
        table.RenderToFile(tableFilePath,true);
        
        //生成列表表字段的模板
        CodeTemplate cloumn =new TableClumnsTemplate();
        //指定输出路径
        string cloumnFilePath = OutputDirectory +"\\Entities\\"+ this.SourceTable.Name +".cs";
         //给子模板参数赋值
        cloumn.SetProperty("SourceTable",this.SourceTable);
        cloumn.RenderToFile(cloumnFilePath,true); 
}
//解决方案输出路径
private string Directory=string.Empty;
public string OutputDirectory{
    get{
        return Directory;
    }
    set{
        if(value.EndsWith("\\"))
            value=value.Substring(0,value.Length-1);
        Directory=value;
    }
}
</script>