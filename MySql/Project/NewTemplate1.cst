<%@ CodeTemplate Language="C#" TargetLanguage="C#" Src="" Inherits="" Debug="True" CompilerVersion="v3.5" ResponseEncoding="UTF-8" Description="输出所有模块文件" %>
<%-- Context --%>
<%-- Object --%>
<%@ Property Name="NameSpace" Type="System.String" Default="NameSpace" Category="Object" Description="项目的命名空间" %>
<%@ Property Name="Assembly" Type="System.String" Default="Assembly" Category="Object" Description="项目的程序集" %>
<%@ Property Name="TableDivideMark" Type="System.String" Default="_" Category="Object" Description="表名分隔符" %>
<%@ Property Name="TablePrefix" Type="System.Boolean" Default="true" Category="Object" Description="是否有表前缀，如果存在表前缀的，会自动把第一个表名分隔符前的表前缀删除掉。" %>
<%@ Property Name="TablePrefixLength" Type="System.Int32" Default="4" Category="Object" Description="表前缀长度，如果表前缀大于这个值，则认为没有表前缀" %>
<%@ Property Name="ColumnDivideMark" Type="System.String" Default="_" Category="Object" Description="字段名分隔符" %>
<%@ Property Name="ColumnPrefix" Type="System.Boolean" Default="false" Category="Object" Description="是否有字段前缀，如果存在字段前缀的，会自动把第一个字段名分隔符前的字段前缀删除掉。" %>
<%@ Property Name="ColumnPrefixLength" Type="System.Int32" Default="0" Category="Object" Description="字段前缀长度，如果字段前缀大于这个值，则认为没有字段前缀" %>
<%@ Property Name="ForceId" Type="System.Boolean" Default="true" Category="Object" Description="强制性自增量标识主键" %>
<%@ Property Name="ForceIdProperty" Type="System.String" Default="ID" Category="Object" Description="强制性自增量标识主键的属性名称" %>
<%@ Property Name="SourceTableNames" Type="System.String" Default="" Category="Object" Description="当指定表名时，只执行字符串中表名列表中的表" %>
<%-- Context --%>
<%@ Assembly Name="System.Design" %>
<%@ Assembly Name="SchemaExplorer" %>
<%@ Import Namespace="SchemaExplorer" %>
<%@ Import Namespace="System.IO" %>
<%@ Import Namespace="System.Xml" %>
<%@ Import Namespace="System.Text" %>
<%@ Import Namespace="System.Windows.Forms.Design" %>
<%@ Import Namespace="System.Text.RegularExpressions" %>
<%@ Import Namespace="System.Collections.Specialized" %>

<script runat="template">


    private DatabaseSchema _sourceDatabase;
    private string _outputDirectory;
    private bool _implementNotification = true;
    
    //模板对象列表（根据模板名称产生出来的模板对象）
    public CodeTemplate[] CurrentTemplates;
    //模板名称数组
    public string[] TemplateNames = {"piggy_projectFileInclue.cst","piggy_SqlMap.config.cst","piggy_dao.config.cst","piggy_service.config.cst","piggy_Model_Auto.cst","iBatis_sqlmap_Auto.cst","piggy_Service.cst","piggy_Model.cst","piggy_DAL.cst","piggy_BLL.cst","iBatis_sqlmap.cst"}; 
    //模板输出格式数组
    public string[] strFormats = {"projectFileInclue.txt","sqlmap.config","Dao_Auto.config","Service_Auto.config","{0}_Auto.cs","{0}_Auto.xml","I{0}BLL.cs","{0}.cs","{0}DAO.cs","{0}BLL.cs","{0}.xml"};
    //模板输出路径
    public string[] OutputPaths={"","\\Data","\\Data\\config","\\Data\\config","\\Data_Auto\\Model","\\Data_Auto\\Map","\\Data\\service","\\Data\\Model","\\Data\\DAL","\\Data\\BLL","\\Data\\Map"};
    [Category("Database")]
    [Description("Database that the mapping file should be based on.")]
    public DatabaseSchema SourceDatabase {
        get { return _sourceDatabase; }
        set { _sourceDatabase = value; }
    }

    [Editor(typeof(System.Windows.Forms.Design.FolderNameEditor), typeof(System.Drawing.Design.UITypeEditor))]
    [Category("Class")]
    [Description("The folder to save the generated class files.")]
    public string OutputDirectory
    {
        get {return _outputDirectory;}
        set {_outputDirectory= value;}
    }

    //根据模板名称产生出来的模板对象列表
    public void CreateTemplate()
    {
        if (CurrentTemplates==null)
        {
            CurrentTemplates=new CodeTemplate[TemplateNames.Length];
            for (int i = 0; i < TemplateNames.Length; i++)
            {
                CurrentTemplates[i]=CompileTemplate(CodeTemplateInfo.DirectoryName + TemplateNames[i]);
            }
        }
    }
    //单独生成一个模板对象
    public CodeTemplate CompileTemplate(string templateName)
    {
        CodeTemplateCompiler compiler = new CodeTemplateCompiler(templateName);
        compiler.Compile();

        if (compiler.Errors.Count == 0)
        {
            return compiler.CreateInstance();
        }
        else
        {
            for (int i = 0; i < compiler.Errors.Count; i++)
            {
                Response.WriteLine(compiler.Errors[i].ToString());
            }
            return null;
        }

    }

    //执行输出脚本
    public void Generate()
    {
        if (CurrentTemplates==null)
            CreateTemplate();
        StringCollection ExcludedTables=new StringCollection();
        if (SourceTableNames.Length>0)
        {
            int mIndex=-1;
            mIndex=SourceTableNames.IndexOf(',');
            while (mIndex>0) {
                ExcludedTables.Add(SourceTableNames.Substring(0,mIndex));
                SourceTableNames=SourceTableNames.Remove(0,mIndex+1);
                mIndex=SourceTableNames.IndexOf(',');
            }
            ExcludedTables.Add(SourceTableNames);
        }    
        foreach(TableSchema SourceTable in SourceDatabase.Tables)
        {
            if (SourceTableNames.Length>0)
            {
                if (!ExcludedTables.Contains(SourceTable.Name))
                    continue;
            }
            Response.Write(string.Format("Processing Table {0} ... ", SourceTable.Name));
            Response.WriteLine();
            try
            {
            string className = ClearDivideMarkAndPrefix(SourceTable.Name,TableDivideMark,TablePrefix,TablePrefixLength);
            for (int i = 0; i < TemplateNames.Length; i++)
                {
                string FileName;
                if (i<=3)
                {
                    CurrentTemplates[i].SetProperty("SourceDatabase", SourceDatabase);
                    FileName=strFormats[i];
                }
                else {
                    CurrentTemplates[i].SetProperty("SourceTable", SourceTable);
                    FileName=string.Format(strFormats[i],className);
                }
                FileName=Path.Combine(OutputDirectory+OutputPaths[i], FileName);
                //统一属性赋值
                CurrentTemplates[i].SetProperty("NameSpace",NameSpace);
                CurrentTemplates[i].SetProperty("Assembly",Assembly);
                CurrentTemplates[i].SetProperty("TableDivideMark",TableDivideMark);
                CurrentTemplates[i].SetProperty("TablePrefix",TablePrefix);
                CurrentTemplates[i].SetProperty("TablePrefixLength",TablePrefixLength);
                CurrentTemplates[i].SetProperty("ColumnDivideMark",ColumnDivideMark);
                CurrentTemplates[i].SetProperty("ColumnPrefix",ColumnPrefix);
                CurrentTemplates[i].SetProperty("ColumnPrefixLength",ColumnPrefixLength);
                CurrentTemplates[i].SetProperty("ForceId",ForceId);
                CurrentTemplates[i].SetProperty("ForceIdProperty",ForceIdProperty);
                
                Response.WriteLine(string.Format("{0} In {1} ", TemplateNames[i],FileName));
                CurrentTemplates[i].RenderToFile(FileName, true);
                }
            }
            catch (Exception ex)
            {
                Response.WriteLine("Error: " + ex);
            }
        }
    }
</script>

<% this.Generate();  %> 